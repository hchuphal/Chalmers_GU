class MyDslGenerator extends AbstractGenerator {
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
            fsa.generateFile('manuSys.txt', 'Sweden' +
             '''«FOR e : resource.allContents.filter(ManufacturingSystem).toIterable»              
                		«e.name »
                «ENDFOR»
                '''
            ) 
        }
        
        
     def getElements(Resource resource)
     {
     	'''«FOR e : resource.allContents.filter(ManufacturingSystemElement).toIterable»              
                	«IF(e.transition.size() > 0)»
                		«e.name »
                		«e.name » -> «e.transition.get(0).name»
                	«ENDIF»
                «ENDFOR»
                '''
        }
}




«IF (counter == m.consistsOf.size() - 1)»
                                «m.name » -> «m.consistsOf.get(counter).name»
                                «counterReset()»
                            «ELSE»
                                «m.name » -> «m.consistsOf.get(counter).name»
                                «counterUp()»


ManuSystem -> storage_1
ManuSystem -> storage_1
ManuSystem -> storage_1
ManuSystem -> storage_1
ManuSystem -> storage_1
ManuSystem -> storage_1
 
storage_1 -> Manufacturing_Step1
0
storage_2 -> Manufacturing_Step2
0


The metamodel from assignment 1 supports hierarchy. This means that ManufacturingSystems can contain other ManufacturingSystems via CompositeManufacturingSteps. The result will be a model corresponding to the same metamodel as the input model. 




int indexSystem = 0;
    int indexElement = 0;
    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        fsa.generateFile('ManuSysStg.txt',
            '''«FOR m : resource.allContents.filter(ManufacturingSystem).toIterable»
                    «IF(m.consistsOf.size() > 0)»
                        «FOR t : m.consistsOf»
                            «IF (indexSystem <= m.consistsOf.size() - 1)»
                                «m.name » -> «m.consistsOf.get(indexSystem).name»
                                «m.consistsOf.get(indexSystem).name » -> «m.consistsOf.get(indexSystem++).responsible.name»
                            «ENDIF»
                        «ENDFOR»
                    «ENDIF»
               «ENDFOR»
    
               «FOR e : resource.allContents.filter(ManufacturingSystemElement).toIterable»
                     «IF(e.transition.size() > 0)»
                        «FOR t : e.transition»
                            «IF (indexElement <= e.transition.size() - 1)»
                                «e.name » -> «e.transition.get(indexElement).name»
                                «e.name » -> «e.transition.get(indexElement++).responsible.name»
                            «ENDIF»
                        «ENDFOR»
                    «ENDIF»
               «ENDFOR»
            '''
            )
        }
       



ManufacturingSystem ManuSystem
{
    set start storage storage_1
    set end storage storage_2
    create responsible Mike, Charlie, Willies
    set lead responsible Mike
    workpiece type Wood, Metal, Stone
    processes WorkPiece {of type Stone}, WorkPiece {of type Metal}



/*Way 2 - nest the manufacturing steps inside a single initiate */
/*Note - increases complexity but reduces typing */
    initiate {
        StoragePoint storage_1 {
            set responsible Charlie
            stores Wood
            transition Manufacturing_Step1
        }
        StoragePoint storage_2 {
            set responsible Willies
            stores Metal
            transition Manufacturing_Step2
            
        }
        ManufacturingStep Manufacturing_Step1 {
            speed = 10
            set responsible Charlie
            input{InputCondition imp, 
                BinaryCondition cond {left imp or right imp}
            }
            output{input condition imp}
            
        }
        

        ManufacturingStep Manufacturing_Step2 {
            speed = 20
            set responsible Mike
            input{InputCondition imp, 
                BinaryCondition cond {left imp or right imp}
            }
            output{input condition imp}
            
        }
        
        TransportStep transportPoint_wagon {
            speed = 10
            set responsible Charlie
            input {InputCondition imp}
            output {input condition imp}
        }
        QualityAssuranceStep QA_1 {
            speed = 10
            set responsible Willies
            input {InputCondition con}
            output {input condition con}
            
        }
        
    }
    
}






«IF (indexElement == e.transition.size() - 1)»
                                «e.name» -> «e.transition.get(indexElement = 0).name»
                            «ENDIF»



ManuSys300 -> raw
ManuSys300 -> processed
ManuSys300 -> something
ManuSys300 -> another
ManuSys300 -> manuStep
ManuSys300 -> wagon
ManuSys300 -> qas
ManuSys300 -> Mike
ManuSys300 -> Wood
ManuSys300 -> Metal
ManuSys300 -> Stone

processed -> manuStep
processed -> Willies
manuStep -> wagon
manuStep -> raw
manuStep -> qas
manuStep -> Charlie
wagon -> raw
wagon -> processed
wagon -> Simon
qas -> manuStep
qas -> Willies




gistered as a citizen according to your transfer notification.
Attached PDF document contains information about your new address.
With kind regards