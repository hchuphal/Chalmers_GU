/**
 */
package manufacturingSystem.provider;

import java.util.ArrayList;
import java.util.Collection;

import manufacturingSystem.util.ManufacturingSystemAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ManufacturingSystemItemProviderAdapterFactory extends ManufacturingSystemAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ManufacturingSystemItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link manufacturingSystem.WorkPiece} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkPieceItemProvider workPieceItemProvider;

	/**
	 * This creates an adapter for a {@link manufacturingSystem.WorkPiece}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkPieceAdapter() {
		if (workPieceItemProvider == null) {
			workPieceItemProvider = new WorkPieceItemProvider(this);
		}

		return workPieceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link manufacturingSystem.ManufacturingStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManufacturingStepItemProvider manufacturingStepItemProvider;

	/**
	 * This creates an adapter for a {@link manufacturingSystem.ManufacturingStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManufacturingStepAdapter() {
		if (manufacturingStepItemProvider == null) {
			manufacturingStepItemProvider = new ManufacturingStepItemProvider(this);
		}

		return manufacturingStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link manufacturingSystem.ManufacturingSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManufacturingSystemItemProvider manufacturingSystemItemProvider;

	/**
	 * This creates an adapter for a {@link manufacturingSystem.ManufacturingSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManufacturingSystemAdapter() {
		if (manufacturingSystemItemProvider == null) {
			manufacturingSystemItemProvider = new ManufacturingSystemItemProvider(this);
		}

		return manufacturingSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link manufacturingSystem.TransportStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransportStepItemProvider transportStepItemProvider;

	/**
	 * This creates an adapter for a {@link manufacturingSystem.TransportStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransportStepAdapter() {
		if (transportStepItemProvider == null) {
			transportStepItemProvider = new TransportStepItemProvider(this);
		}

		return transportStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link manufacturingSystem.QualityAssuranceStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QualityAssuranceStepItemProvider qualityAssuranceStepItemProvider;

	/**
	 * This creates an adapter for a {@link manufacturingSystem.QualityAssuranceStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQualityAssuranceStepAdapter() {
		if (qualityAssuranceStepItemProvider == null) {
			qualityAssuranceStepItemProvider = new QualityAssuranceStepItemProvider(this);
		}

		return qualityAssuranceStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link manufacturingSystem.Responsible} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponsibleItemProvider responsibleItemProvider;

	/**
	 * This creates an adapter for a {@link manufacturingSystem.Responsible}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponsibleAdapter() {
		if (responsibleItemProvider == null) {
			responsibleItemProvider = new ResponsibleItemProvider(this);
		}

		return responsibleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link manufacturingSystem.InputCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputConditionItemProvider inputConditionItemProvider;

	/**
	 * This creates an adapter for a {@link manufacturingSystem.InputCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputConditionAdapter() {
		if (inputConditionItemProvider == null) {
			inputConditionItemProvider = new InputConditionItemProvider(this);
		}

		return inputConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link manufacturingSystem.StoragePoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoragePointItemProvider storagePointItemProvider;

	/**
	 * This creates an adapter for a {@link manufacturingSystem.StoragePoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoragePointAdapter() {
		if (storagePointItemProvider == null) {
			storagePointItemProvider = new StoragePointItemProvider(this);
		}

		return storagePointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link manufacturingSystem.ManufacturingSystemElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManufacturingSystemElementItemProvider manufacturingSystemElementItemProvider;

	/**
	 * This creates an adapter for a {@link manufacturingSystem.ManufacturingSystemElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManufacturingSystemElementAdapter() {
		if (manufacturingSystemElementItemProvider == null) {
			manufacturingSystemElementItemProvider = new ManufacturingSystemElementItemProvider(this);
		}

		return manufacturingSystemElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link manufacturingSystem.CompositeManufacturingStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeManufacturingStepItemProvider compositeManufacturingStepItemProvider;

	/**
	 * This creates an adapter for a {@link manufacturingSystem.CompositeManufacturingStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeManufacturingStepAdapter() {
		if (compositeManufacturingStepItemProvider == null) {
			compositeManufacturingStepItemProvider = new CompositeManufacturingStepItemProvider(this);
		}

		return compositeManufacturingStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link manufacturingSystem.WorkPieceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkPieceTypeItemProvider workPieceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link manufacturingSystem.WorkPieceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkPieceTypeAdapter() {
		if (workPieceTypeItemProvider == null) {
			workPieceTypeItemProvider = new WorkPieceTypeItemProvider(this);
		}

		return workPieceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link manufacturingSystem.OutputDecision} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputDecisionItemProvider outputDecisionItemProvider;

	/**
	 * This creates an adapter for a {@link manufacturingSystem.OutputDecision}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputDecisionAdapter() {
		if (outputDecisionItemProvider == null) {
			outputDecisionItemProvider = new OutputDecisionItemProvider(this);
		}

		return outputDecisionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link manufacturingSystem.WorkPieceCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkPieceConditionItemProvider workPieceConditionItemProvider;

	/**
	 * This creates an adapter for a {@link manufacturingSystem.WorkPieceCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkPieceConditionAdapter() {
		if (workPieceConditionItemProvider == null) {
			workPieceConditionItemProvider = new WorkPieceConditionItemProvider(this);
		}

		return workPieceConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link manufacturingSystem.BinaryCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryConditionItemProvider binaryConditionItemProvider;

	/**
	 * This creates an adapter for a {@link manufacturingSystem.BinaryCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryConditionAdapter() {
		if (binaryConditionItemProvider == null) {
			binaryConditionItemProvider = new BinaryConditionItemProvider(this);
		}

		return binaryConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link manufacturingSystem.Negation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NegationItemProvider negationItemProvider;

	/**
	 * This creates an adapter for a {@link manufacturingSystem.Negation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNegationAdapter() {
		if (negationItemProvider == null) {
			negationItemProvider = new NegationItemProvider(this);
		}

		return negationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (workPieceItemProvider != null) workPieceItemProvider.dispose();
		if (manufacturingStepItemProvider != null) manufacturingStepItemProvider.dispose();
		if (manufacturingSystemItemProvider != null) manufacturingSystemItemProvider.dispose();
		if (transportStepItemProvider != null) transportStepItemProvider.dispose();
		if (qualityAssuranceStepItemProvider != null) qualityAssuranceStepItemProvider.dispose();
		if (responsibleItemProvider != null) responsibleItemProvider.dispose();
		if (inputConditionItemProvider != null) inputConditionItemProvider.dispose();
		if (storagePointItemProvider != null) storagePointItemProvider.dispose();
		if (manufacturingSystemElementItemProvider != null) manufacturingSystemElementItemProvider.dispose();
		if (compositeManufacturingStepItemProvider != null) compositeManufacturingStepItemProvider.dispose();
		if (workPieceTypeItemProvider != null) workPieceTypeItemProvider.dispose();
		if (outputDecisionItemProvider != null) outputDecisionItemProvider.dispose();
		if (workPieceConditionItemProvider != null) workPieceConditionItemProvider.dispose();
		if (binaryConditionItemProvider != null) binaryConditionItemProvider.dispose();
		if (negationItemProvider != null) negationItemProvider.dispose();
	}

}
