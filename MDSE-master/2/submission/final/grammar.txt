// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "com.chalmers.manufacturingSystem" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ManufacturingSystem returns ManufacturingSystem:
	'ManufacturingSystem'
	name=EString
	'{'
		'set' 'start' 'storage' start+=[StoragePoint|EString] ( "," start+=[StoragePoint|EString])* 
		'set' 'end' 'storage' end+=[StoragePoint|EString] ( "," end+=[StoragePoint|EString])*
		'create' 'responsible' staff+=Responsible ( "," staff+=Responsible)* 
		'set' 'lead' 'responsible' responsible=[Responsible|EString]
		('initiate' (( consistsOf+=ManufacturingSystemElement ';' ( 'initiate' consistsOf+=ManufacturingSystemElement)* ';')  | ('{' consistsOf+=ManufacturingSystemElement ( ',' consistsOf+=ManufacturingSystemElement)* '}')))*     
		('use' uses+=WorkPieceType ( "," uses+=WorkPieceType)*)?
		('processes' transforms+=WorkPiece ( "," transforms+=WorkPiece)*)?

   '}';

ManufacturingSystemElement returns ManufacturingSystemElement:
	ManufacturingSystemElement_Impl | ManufacturingStep | TransportStep | QualityAssuranceStep | StoragePoint | CompositeManufacturingStep;





InputCondition returns InputCondition:
	InputCondition_Impl | WorkPieceCondition | BinaryCondition | Negation;


ManufacturingSystemElement_Impl returns ManufacturingSystemElement:
	{ManufacturingSystemElement}
	'ManufacturingSystemElement'
	name=EString
	'{'
		('transition' '(' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* ')' )?
		'set' 'responsible' responsible=[Responsible|EString]
	'}';

StoragePoint:
	'StoragePoint'
	name=EString
	'{'
		('transit' 'to' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])*)?
		'set' 'responsible' responsible=[Responsible|EString]
		('stores' stores+=[WorkPieceType|EString] ( "," stores+=[WorkPieceType|EString])* )?
	'}';

WorkPieceType returns WorkPieceType:
	{WorkPieceType}
	name=EString;

WorkPiece returns WorkPiece:
	'WorkPiece'
	'{'
		'of' 'type' hasType=[WorkPieceType|EString]
	'}';

EString returns ecore::EString:
	STRING | ID;

Responsible returns Responsible:
	{Responsible}
	name=EString;

ManufacturingStep returns ManufacturingStep:
	'ManufacturingStep'
	name=EString
	'{'
		'speed' '=' speed=EInt
		('transit' 'to' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* )?
		'set' 'responsible' responsible=[Responsible|EString]
		'input' '{' input+=InputCondition ( "," input+=InputCondition)* '}' 
		'output' '{' output+=OutputDecision ( "," output+=OutputDecision)* '}' 
	'}';

TransportStep returns TransportStep:
	'TransportStep'
	name=EString
	'{'
		'speed' '=' speed=EInt
		('transit' 'to' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* )?
		'set' 'responsible' responsible=[Responsible|EString]
		'input' '{' input+=InputCondition ( "," input+=InputCondition)* '}' 
		//output? isnt this just transporting workpieces?
		'output' '{' output+=OutputDecision ( "," output+=OutputDecision)* '}' 
	'}';

QualityAssuranceStep returns QualityAssuranceStep:
	'QualityAssuranceStep'
	name=EString
	'{'
		'set' 'speed' speed=EInt
		('transition' '(' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* ')' )?
		'set' 'responsible' responsible=[Responsible|EString]
		'input' '{' input+=InputCondition ( "," input+=InputCondition)* '}' 
		'output' '{' output+=OutputDecision ( "," output+=OutputDecision)* '}' 
	'}';

//ok this is the manufacturing step
CompositeManufacturingStep returns CompositeManufacturingStep:
	'CompositeManufacturingStep'
	name=EString
	'{'
		'set' 'speed' speed=EInt
		('transition' '(' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* ')' )?
		'set' 'responsible' responsible=[Responsible|EString]
		'input' '{' input+=InputCondition ( "," input+=InputCondition)* '}' 
		'output' '{' output+=OutputDecision ( "," output+=OutputDecision)* '}' 
		'contains' contains=ManufacturingSystem
	'}';

EInt returns ecore::EInt:
	'-'? INT;

//ok this is the  condition but we just create one?
InputCondition_Impl returns InputCondition:
	{InputCondition}
	'InputCondition'
	name=EString;

//somehow related to the condition but why is the type optional
OutputDecision returns OutputDecision:
	'OutputDecision'
	'{'
		('output' 'type' outputTypes=[WorkPieceType|EString])?
		'input' 'condition' input+=[InputCondition|EString] ( "," input+=[InputCondition|EString])* 
	'}';

//set workpiece type on condition
WorkPieceCondition returns WorkPieceCondition:
	'WorkPieceCondition'
	name=EString
	'{'
		'requires' 'type' requiresType=[WorkPieceType|EString]
	'}';

//this i dont get exactly what and how it does it
//left input condition and right input condition...what?
BinaryCondition returns BinaryCondition:
	'BinaryCondition'
	name=EString
	'{'
		'condition' '[' 'left' left=[InputCondition|EString]  type=BinaryType 'right' right=[InputCondition|EString] ']'
		
		/*
		'left' left=[InputCondition|EString]
		'right' right=[InputCondition|EString]
		*/
	'}';

//Question mark?
Negation returns Negation:
	'Negation'
	name=EString
	'{'
		'contains' 'condition' contains=[InputCondition|EString]
	'}';
	
//Question mark?
enum BinaryType returns BinaryType:
				and = 'and' | or = 'or';
