/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import manufacturingSystem.InputCondition;
import manufacturingSystem.ManufacturingStep;
import manufacturingSystem.ManufacturingSystem;
import manufacturingSystem.ManufacturingSystemElement;
import manufacturingSystem.OutputDecision;
import manufacturingSystem.Responsible;
import manufacturingSystem.WorkPiece;
import manufacturingSystem.WorkPieceType;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;
  
  protected void _format(final ManufacturingSystem manufacturingSystem, @Extension final IFormattableDocument document) {
    EList<ManufacturingSystemElement> _consistsOf = manufacturingSystem.getConsistsOf();
    for (final ManufacturingSystemElement manufacturingSystemElement : _consistsOf) {
      document.<ManufacturingSystemElement>format(manufacturingSystemElement);
    }
    EList<WorkPieceType> _uses = manufacturingSystem.getUses();
    for (final WorkPieceType workPieceType : _uses) {
      document.<WorkPieceType>format(workPieceType);
    }
    EList<WorkPiece> _transforms = manufacturingSystem.getTransforms();
    for (final WorkPiece workPiece : _transforms) {
      document.<WorkPiece>format(workPiece);
    }
    EList<Responsible> _staff = manufacturingSystem.getStaff();
    for (final Responsible responsible : _staff) {
      document.<Responsible>format(responsible);
    }
  }
  
  protected void _format(final ManufacturingStep manufacturingStep, @Extension final IFormattableDocument document) {
    EList<InputCondition> _input = manufacturingStep.getInput();
    for (final InputCondition inputCondition : _input) {
      document.<InputCondition>format(inputCondition);
    }
    EList<OutputDecision> _output = manufacturingStep.getOutput();
    for (final OutputDecision outputDecision : _output) {
      document.<OutputDecision>format(outputDecision);
    }
  }
  
  public void format(final Object manufacturingStep, final IFormattableDocument document) {
    if (manufacturingStep instanceof ManufacturingStep) {
      _format((ManufacturingStep)manufacturingStep, document);
      return;
    } else if (manufacturingStep instanceof XtextResource) {
      _format((XtextResource)manufacturingStep, document);
      return;
    } else if (manufacturingStep instanceof ManufacturingSystem) {
      _format((ManufacturingSystem)manufacturingStep, document);
      return;
    } else if (manufacturingStep instanceof EObject) {
      _format((EObject)manufacturingStep, document);
      return;
    } else if (manufacturingStep == null) {
      _format((Void)null, document);
      return;
    } else if (manufacturingStep != null) {
      _format(manufacturingStep, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(manufacturingStep, document).toString());
    }
  }
}
