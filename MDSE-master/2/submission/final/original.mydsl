// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "com.chalmers.manufacturingSystem" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ManufacturingSystem returns ManufacturingSystem:
	'ManufacturingSystem'
	name=EString
	'{'
		'start' '(' start+=[StoragePoint|EString] ( "," start+=[StoragePoint|EString])* ')' 
		'end' '(' end+=[StoragePoint|EString] ( "," end+=[StoragePoint|EString])* ')' 
		('responsible' responsible=[Responsible|EString])?
		'consistsOf' '{' consistsOf+=ManufacturingSystemElement ( "," consistsOf+=ManufacturingSystemElement)* '}' 
		('uses' '{' uses+=WorkPieceType ( "," uses+=WorkPieceType)* '}' )?
		('transforms' '{' transforms+=WorkPiece ( "," transforms+=WorkPiece)* '}' )?
		('staff' '{' staff+=Responsible ( "," staff+=Responsible)* '}' )?
	'}';

ManufacturingSystemElement returns ManufacturingSystemElement:
	ManufacturingSystemElement_Impl | ManufacturingStep | TransportStep | QualityAssuranceStep | StoragePoint | CompositeManufacturingStep;





InputCondition returns InputCondition:
	InputCondition_Impl | WorkPieceCondition | BinaryCondition | Negation;


ManufacturingSystemElement_Impl returns ManufacturingSystemElement:
	{ManufacturingSystemElement}
	'ManufacturingSystemElement'
	name=EString
	'{'
		('transition' '(' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* ')' )?
		('responsible' responsible=[Responsible|EString])?
	'}';

StoragePoint returns StoragePoint:
	{StoragePoint}
	'StoragePoint'
	name=EString
	'{'
		('transition' '(' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* ')' )?
		('responsible' responsible=[Responsible|EString])?
		('stores' '(' stores+=[WorkPieceType|EString] ( "," stores+=[WorkPieceType|EString])* ')' )?
	'}';

WorkPieceType returns WorkPieceType:
	{WorkPieceType}
	'WorkPieceType'
	name=EString;

WorkPiece returns WorkPiece:
	'WorkPiece'
	'{'
		'hasType' hasType=[WorkPieceType|EString]
	'}';

EString returns ecore::EString:
	STRING | ID;

Responsible returns Responsible:
	{Responsible}
	'Responsible'
	name=EString;

ManufacturingStep returns ManufacturingStep:
	'ManufacturingStep'
	name=EString
	'{'
		('speed' speed=EInt)?
		('transition' '(' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* ')' )?
		('responsible' responsible=[Responsible|EString])?
		'input' '{' input+=InputCondition ( "," input+=InputCondition)* '}' 
		'output' '{' output+=OutputDecision ( "," output+=OutputDecision)* '}' 
	'}';

TransportStep returns TransportStep:
	'TransportStep'
	name=EString
	'{'
		('speed' speed=EInt)?
		('transition' '(' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* ')' )?
		('responsible' responsible=[Responsible|EString])?
		'input' '{' input+=InputCondition ( "," input+=InputCondition)* '}' 
		'output' '{' output+=OutputDecision ( "," output+=OutputDecision)* '}' 
	'}';

QualityAssuranceStep returns QualityAssuranceStep:
	'QualityAssuranceStep'
	name=EString
	'{'
		('speed' speed=EInt)?
		('transition' '(' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* ')' )?
		('responsible' responsible=[Responsible|EString])?
		'input' '{' input+=InputCondition ( "," input+=InputCondition)* '}' 
		'output' '{' output+=OutputDecision ( "," output+=OutputDecision)* '}' 
	'}';

CompositeManufacturingStep returns CompositeManufacturingStep:
	'CompositeManufacturingStep'
	name=EString
	'{'
		('speed' speed=EInt)?
		('transition' '(' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* ')' )?
		('responsible' responsible=[Responsible|EString])?
		'input' '{' input+=InputCondition ( "," input+=InputCondition)* '}' 
		'output' '{' output+=OutputDecision ( "," output+=OutputDecision)* '}' 
		'contains' contains=ManufacturingSystem
	'}';

EInt returns ecore::EInt:
	'-'? INT;

InputCondition_Impl returns InputCondition:
	{InputCondition}
	'InputCondition'
	name=EString;

OutputDecision returns OutputDecision:
	'OutputDecision'
	'{'
		('outputTypes' outputTypes=[WorkPieceType|EString])?
		'input' '(' input+=[InputCondition|EString] ( "," input+=[InputCondition|EString])* ')' 
	'}';

WorkPieceCondition returns WorkPieceCondition:
	'WorkPieceCondition'
	name=EString
	'{'
		'requiresType' requiresType=[WorkPieceType|EString]
	'}';

BinaryCondition returns BinaryCondition:
	'BinaryCondition'
	name=EString
	'{'
		'type' type=BinaryType
		'left' left=[InputCondition|EString]
		'right' right=[InputCondition|EString]
	'}';

Negation returns Negation:
	'Negation'
	name=EString
	'{'
		'contains' contains=[InputCondition|EString]
	'}';

enum BinaryType returns BinaryType:
				and = 'and' | or = 'or';
